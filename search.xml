<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js原生复制文本</title>
      <link href="/2024/02/21/js%E5%8E%9F%E7%94%9F%E5%A4%8D%E5%88%B6%E6%96%87%E6%9C%AC/"/>
      <url>/2024/02/21/js%E5%8E%9F%E7%94%9F%E5%A4%8D%E5%88%B6%E6%96%87%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="js原生复制文本到剪切板"><a href="#js原生复制文本到剪切板" class="headerlink" title="js原生复制文本到剪切板"></a>js原生复制文本到剪切板</h1><p>功能：实现一键复制文本内容，用于鼠标右键粘贴。</p><p>简单的模板如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> textarea = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;textarea&quot;</span>);</span><br><span class="line">textarea.<span class="property">value</span> = <span class="string">&#x27;要复制的内容&#x27;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(textarea);</span><br><span class="line">textarea.<span class="title function_">select</span>();</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">&#x27;copy&#x27;</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(textarea);</span><br></pre></td></tr></table></figure><p>现对其实现思路进行逐行分析。</p><ol><li><p>首先动态创建 textarea 标签</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> textarea = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;textarea&quot;</span>);</span><br></pre></td></tr></table></figure><p>document.createElement()是一个JavaScript DOM方法，用于在文档中创建指定的HTML元素，只需要在JS中调用该方法，并指定要创建的元素的标签名称作为参数。</p><p>创建完成后，即可对其进行相关操作，如添加文本内容、设置属性或将其添加至另一个元素中。比如这里其实设置textarea相关属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该 textarea 设为 readonly 防止 iOS 下自动唤起键盘，同时将 textarea 移出可视区域</span></span><br><span class="line">textarea.<span class="property">readOnly</span> = <span class="string">&#x27;readonly&#x27;</span>;</span><br><span class="line">textarea.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&#x27;absolute&#x27;</span>;</span><br><span class="line">textarea.<span class="property">style</span>.<span class="property">left</span> = <span class="string">&#x27;-9999px&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>将要 copy 的值赋给 textarea 标签的 value 属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">textarea.<span class="property">value</span> = <span class="string">&#x27;要复制的内容&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>将 textarea 插入到 body 中</p><p>document.createElement()是在对象中创建一个对象，要与appendChild() 或 insertBefore()方法联合使用。其中，appendChild() 方法在节点的子节点列表末添加新的子节点；insertBefore() 方法在节点的子节点列表任意位置插入新的节点。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(textarea);</span><br></pre></td></tr></table></figure></li><li><p>选中值并复制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">textareaEle.<span class="title function_">select</span>();</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">&#x27;copy&#x27;</span>)</span><br></pre></td></tr></table></figure><p>当然实际过程中，如果复制成功要进行相关操作，直接进行判断即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">textarea.<span class="title function_">select</span>()</span><br><span class="line"><span class="keyword">const</span> result = <span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">&#x27;copy&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> (result) &#123;</span><br><span class="line">    <span class="comment">//根据实际进行设计</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>body中将插入的内容移除</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(textarea)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>金融科技管理平台</title>
      <link href="/2024/01/16/%E9%87%91%E8%9E%8D%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/"/>
      <url>/2024/01/16/%E9%87%91%E8%9E%8D%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="金融科技管理平台"><a href="#金融科技管理平台" class="headerlink" title="金融科技管理平台"></a>金融科技管理平台</h1><p>2023年10月跟随博士参加了研创赛，项目拿了研创赛国银，虽然成绩不错，但项目本身个人觉得还是很粗糙。项目展示的平台前端是基于react框架，本人截止目前还未系统学习，当时搭建也是跟随队友依葫芦画瓢，并不是很满意。</p><p>于是今天决定使用vue重新构建此系统，将其中重点功能进行实现。此笔记仅展示项目实现的关键过程，项目具体实现代码后期会上传git仓库。</p><h3 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h3><p>使用vite搭建（<a href="https://www.vitejs.net/guide/#scaffolding-your-first-vite-project%EF%BC%89">https://www.vitejs.net/guide/#scaffolding-your-first-vite-project）</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init vite@latest</span><br></pre></td></tr></table></figure><p>然后自己取个项目名字，选择所需开发配套（我这里选择vue、JS即可）。</p><p>接着进入项目，安装所需依赖，即可运行。</p><ol><li><p>为了后期管理方便，在src下新建router(路由文件)、utils(公共文件)、views(页面组件文件)、api（地址管理文件）、components（公共组件文件）及asserts。</p></li><li><p>下载所需依赖包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i axios vue-router vuex</span><br></pre></td></tr></table></figure></li><li><p>路由与main.js文件关联。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createRouter, createWebHashHistory &#125; from &quot;vue-router&quot;;</span><br><span class="line">import Login from &#x27;../views/Login.vue&#x27;;</span><br><span class="line"></span><br><span class="line">const routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: &#x27;/&#x27;,</span><br><span class="line">        component: Login</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">const router = createRouter(&#123;</span><br><span class="line">    history: createWebHashHistory(),</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export default router;</span><br></pre></td></tr></table></figure><p>main.js引用路由</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import router from &#x27;./router&#x27;</span><br><span class="line"></span><br><span class="line">createApp(App).use(router).mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure></li><li><p>store与main.js文件关联</p><p>vuex：集中式管理状态容器，可以实现任意组件间通信！</p><p>在store文件夹下新建文件index.js，创建大仓库。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createStore &#125; from &quot;vuex&quot;;</span><br><span class="line">import admin from &#x27;./admin&#x27;</span><br><span class="line"></span><br><span class="line">export default createStore(&#123;</span><br><span class="line">    // 存储数据</span><br><span class="line">    state:&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    //计算属性</span><br><span class="line">    getters: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    modules: &#123;</span><br><span class="line">        admin</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>main.js与引用路由方法一样，引入状态管理store。</p></li><li><p>vite相关配置</p><p>这个本质其实就是开发环境与生产环境配置。</p><p>由于我是使用vite搭建环境，所以使用此方法的朋友需要知道vite环境变量和相关模式。</p><ul><li><input checked="" disabled="" type="checkbox"> vite在 import.meta.env 对象上暴露环境变量；</li><li><input checked="" disabled="" type="checkbox"> 只有以 VITE_ 为前缀的变量才会暴露给经过vite处理的代码（防止泄露到客户端）；</li></ul><p>实际操作中，在自己根目录下新建 .env.development 与 .env.production 文件，在里面配置端口号和接口地址等信息。接着在vite.config.js文件引入loadEnv函数，配置修改如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">export default defineConfig((&#123;command, mode&#125;) =&gt; &#123;</span><br><span class="line">    const env = loadEnv(mode, process.cwd(), &#x27;&#x27;)</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      plugins: [</span><br><span class="line">        vue()</span><br><span class="line">      ],</span><br><span class="line">      server: &#123;</span><br><span class="line">        host: &#x27;0.0.0.0&#x27;,</span><br><span class="line">        port: env.VITE_APP_PORT,</span><br><span class="line">        proxy: &#123;</span><br><span class="line">          &#x27;/api&#x27;: &#123;</span><br><span class="line">            target: env.VITE_APP_API_BASEURL,</span><br><span class="line">            changeOrigin: true,</span><br><span class="line">            rewrite: (path) =&gt; path.replace(/^\/api/, &#x27;&#x27;),</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注意，Vite默认不加载.env文件，所以要使用loadEnv函数来指定加载，具体配置可以参考vite官方文档。</p></li><li><p>axios使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios --save</span><br></pre></td></tr></table></figure><p>在官网里面我们可以看到其具体使用方法，直接导入后，axios.get…，这种使用方式虽然简单，但不易于维护，所以一般都需要封装。</p><p>我在utils文件夹下新建一个request的JS文件来封装这个库，下面这些代码可以参考axios官网，包括拦截器等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line"></span><br><span class="line">export function request(config)&#123;</span><br><span class="line">    const instance = axios.create(&#123;</span><br><span class="line">        // `baseURL` 将自动加在 `url` 前面</span><br><span class="line">        baseURL: import.meta.env.VITE_APP_API_BASEURL,</span><br><span class="line">        //指定请求超时的毫秒数</span><br><span class="line">        timeout: 5000,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 添加请求拦截器</span><br><span class="line">    instance.interceptors.request.use(function (config) &#123;</span><br><span class="line">        // 在发送请求之前做些什么(如插入token)</span><br><span class="line">        return config;</span><br><span class="line">    &#125;, function (error) &#123;</span><br><span class="line">        // 对请求错误做些什么</span><br><span class="line">        return Promise.reject(error);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 添加响应拦截器</span><br><span class="line">    instance.interceptors.response.use(function (response) &#123;</span><br><span class="line">        // 2xx 范围内的状态码都会触发该函数。</span><br><span class="line">        // 对响应数据做点什么</span><br><span class="line">        return response;</span><br><span class="line">    &#125;, function (error) &#123;</span><br><span class="line">        // 超出 2xx 范围的状态码都会触发该函数。</span><br><span class="line">        // 对响应错误做点什么</span><br><span class="line">        if(error.response)&#123;</span><br><span class="line">            if(error.status == 500)&#123;</span><br><span class="line">                alert(&#x27;服务器内部发送错误！&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return Promise.reject(error);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 发送一个真正的请求</span><br><span class="line">    return instance(config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那当我们需要向多个服务器发送多个请求，那只需在此新建多个实例，按需配置对应的拦截器就行，非常方便！</p><p>使用时，直接引用request即可，不过我这里由于功能太复杂，页面太多，我在views文件夹每个页面下各建了一个管理接口方法的文件（service.js），真正规范的应该是在页面同级目录下新建service文件夹，对应管理。</p></li><li><p>element-plus引入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install element-plus</span><br></pre></td></tr></table></figure><p>main.js引入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import ElementPlus from &#x27;element-plus&#x27;</span><br><span class="line">import &#x27;element-plus/dist/index.css&#x27;</span><br><span class="line">createApp(App).use(router).use(store).use(ElementPlus).mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="二、页面开发"><a href="#二、页面开发" class="headerlink" title="二、页面开发"></a>二、页面开发</h3><p>本次页面开发所用组件库如下：</p><ul><li>element-plus（<a href="https://element-plus.gitee.io/zh-CN/%EF%BC%89">https://element-plus.gitee.io/zh-CN/）</a></li><li>echarts（<a href="https://echarts.apache.org/examples/en/index.html%EF%BC%89">https://echarts.apache.org/examples/en/index.html）</a></li></ul><h4 id="2-1-登录注册"><a href="#2-1-登录注册" class="headerlink" title="2.1 登录注册"></a>2.1 登录注册</h4><p>考虑到登录注册所需信息不一样的情况，先使用Tabs组件进行包裹，再使用form表单。</p><p>我这里只展示登录写法吧（注册一样的）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-tabs v-model=&quot;activeName&quot; class=&quot;demo-tabs&quot;&gt;</span><br><span class="line">    &lt;el-tab-pane label=&quot;账号登录&quot; name=&quot;first&quot;&gt;</span><br><span class="line">        &lt;el-form :model=&quot;form&quot; label-width=&quot;120px&quot;&gt;</span><br><span class="line">            &lt;el-form-item label=&quot;用户名字&quot;&gt;</span><br><span class="line">                &lt;el-input v-model=&quot;userName&quot; /&gt;</span><br><span class="line">            &lt;/el-form-item&gt;</span><br><span class="line">            &lt;el-form-item label=&quot;手机号码&quot;&gt;</span><br><span class="line">                &lt;el-input v-model=&quot;phone&quot;/&gt;</span><br><span class="line">            &lt;/el-form-item&gt;</span><br><span class="line">            &lt;el-form-item label=&quot;用户密码&quot;&gt;</span><br><span class="line">                &lt;el-input v-model=&quot;pwd&quot; type=&quot;password&quot; /&gt;</span><br><span class="line">            &lt;/el-form-item&gt;</span><br><span class="line">            &lt;el-form-item label=&quot;权限密码&quot;&gt;</span><br><span class="line">                &lt;el-input v-model=&quot;topPwd&quot; type=&quot;password&quot; /&gt;</span><br><span class="line">            &lt;/el-form-item&gt;</span><br><span class="line"></span><br><span class="line">            &lt;el-form-item&gt;</span><br><span class="line">                &lt;el-button type=&quot;primary&quot; @click=&quot;onSubmit&quot;&gt;登录&lt;/el-button&gt;</span><br><span class="line">                &lt;el-button&gt;取消&lt;/el-button&gt;</span><br><span class="line">            &lt;/el-form-item&gt;</span><br><span class="line">        &lt;/el-form&gt;</span><br><span class="line">    &lt;/el-tab-pane&gt;</span><br><span class="line">&lt;/el-tabs&gt;</span><br></pre></td></tr></table></figure><p>同时使用reactive动态接收登录信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const form = reactive(&#123;</span><br><span class="line">    userName: &quot;&quot;,</span><br><span class="line">    phone: &quot;&quot;,</span><br><span class="line">    pwd: &quot;&quot;,</span><br><span class="line">    topPwd: &quot;&quot;</span><br><span class="line">&#125;);</span><br><span class="line">const &#123;userName, phone, pwd, topPwd&#125; = toRefs(form);</span><br></pre></td></tr></table></figure><p>我在第一章第6部分已经对axios进行了封装，我这里因为接口太多，我直接在login.vue建立同级的service.js文件，进行请求发送管理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import api from &#x27;../../api&#x27;;</span><br><span class="line">import &#123; request &#125; from &quot;../../utils/request&quot;;</span><br><span class="line"> </span><br><span class="line">export function login(data)&#123;</span><br><span class="line">    if(data.topPwd)&#123;</span><br><span class="line">        const params = &#123;</span><br><span class="line">            &quot;name&quot;: data?.userName,</span><br><span class="line">            &quot;telephone&quot;: data?.phone,</span><br><span class="line">            &quot;password&quot;: data?.pwd,</span><br><span class="line">            &quot;platformPassword&quot;: data?.topPwd</span><br><span class="line">        &#125;</span><br><span class="line">        return request(&#123;</span><br><span class="line">            url: api.admin.Login,</span><br><span class="line">            method: &#x27;POST&#x27;,</span><br><span class="line">            data: params</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就是封装了登录请求的方法，这里注意的点在于我把所有接口信息全部重命名在api文件夹下的admin.js下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export const Login = &#x27;/login&#x27;;</span><br></pre></td></tr></table></figure><p>然后再在index.js文件下统一暴露，方便对url地址进行管理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import * as admin from &#x27;./admin&#x27;</span><br><span class="line">export default&#123;</span><br><span class="line">    admin</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着我们可以直接对登录请求所获信息进行操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const onSubmit = () =&gt; &#123;</span><br><span class="line">    const data = &#123;...form&#125;;</span><br><span class="line">    login(data).then(res =&gt; &#123;</span><br><span class="line">        console.log(res)</span><br><span class="line">        if(res.data.code == 200)&#123;</span><br><span class="line">            // 登录成功</span><br><span class="line">            ElMessage.success(&quot;登录成功&quot;);</span><br><span class="line">            // 信息存入缓存</span><br><span class="line">            token.setStore(&quot;type&quot;, res?.data.type);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            ElMessage.warning(res?.data.msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).catch(err =&gt; &#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">        ElMessage.error(&quot;登录失败，请重试！&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    if(token.getStore(&quot;type&quot;))&#123;</span><br><span class="line">        // 跳转欢迎页</span><br><span class="line">        router.push(&quot;/home&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在实际浏览过程中，会需要将一些个人信息存入浏览器缓存，以便快捷登录、功能权限设置等。</p><p>此系统需要将登录的个人信息中的权限类型存入缓存，我在utils公共文件下新建currentToken.js，对缓存信息写入、获取、清空的操作进行设置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">window._ = &#123;</span><br><span class="line">    setStore: (name, content) =&gt; &#123;</span><br><span class="line">        window.localStorage.setItem(name, content);</span><br><span class="line">    &#125;,</span><br><span class="line">    getStore: (name) =&gt; &#123;</span><br><span class="line">        return window.localStorage.getItem(name);</span><br><span class="line">    &#125;,</span><br><span class="line">    clear: () =&gt; &#123;</span><br><span class="line">        window.localStorage.clear();</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">export default window._;</span><br></pre></td></tr></table></figure><p>于是我们每次引用token，使用相关方法即可操作缓存信息。</p><p>此时我们已经完成了登录操作版块！</p><h4 id="2-2-路由配置"><a href="#2-2-路由配置" class="headerlink" title="2.2 路由配置"></a>2.2 路由配置</h4><p>注册登录完成后，信息存入浏览器缓存，接着应该跳转到首页，我们在构建首页前，需要配置各个页面路由。</p><p>我在第一章第3部分完成了路由与main.js的关联，这里只需要将所需新建的页面写入就行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">const routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: &#x27;/&#x27;,</span><br><span class="line">        component: () =&gt; import(&#x27;../views/Login/Login.vue&#x27;),</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: &#x27;/home&#x27;,</span><br><span class="line">        component: Home,</span><br><span class="line">        children: [</span><br><span class="line">            &#123;</span><br><span class="line">                path: &#x27;&#x27;,</span><br><span class="line">                component: () =&gt; import(&#x27;../views/Welcome/index.vue&#x27;),</span><br><span class="line">                meta: &#123; title: &quot;欢迎&quot;&#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                path: &#x27;connect&#x27;,</span><br><span class="line">                component: () =&gt; import(&#x27;../views/Connect/index.vue&#x27;),</span><br><span class="line">                meta: &#123; title: &quot;联邦学习&quot;&#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                path: &#x27;digit&#x27;,</span><br><span class="line">                component: () =&gt; import(&#x27;../views/Digit/index.vue&#x27;),</span><br><span class="line">                meta: &#123; title: &quot;协调存储&quot;&#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                path: &#x27;template&#x27;,</span><br><span class="line">                component: () =&gt; import(&#x27;../views/Template/index.vue&#x27;),</span><br><span class="line">                meta: &#123; title: &quot;合约模板&quot;&#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                path: &#x27;welcome&#x27;,</span><br><span class="line">                component: () =&gt; import(&#x27;../views/Welcome/index.vue&#x27;),</span><br><span class="line">                meta: &#123; title: &quot;欢迎&quot;&#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                path: &#x27;opera&#x27;,</span><br><span class="line">                children: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        path: &#x27;index&#x27;,</span><br><span class="line">                        component: () =&gt; import(&#x27;../views/Opera/index.vue&#x27;),</span><br><span class="line">                        meta: &#123; title: &quot;网络拓扑&quot;&#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        path: &#x27;create&#x27;,</span><br><span class="line">                        component: () =&gt; import(&#x27;../views/Opera/Create.vue&#x27;),</span><br><span class="line">                        meta: &#123; title: &quot;网络新建&quot;&#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">                meta: &#123; title: &quot;网络运维&quot;&#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">        meta: &#123; title: &quot;系统&quot;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这里有人可能会发现我并未像之前导入Home组件一样一次性导入其他页面组件。我使用了懒加载的方式，匹配到对应路径才会动态导入，这是目前比较推荐的方式，性能更好。</p><p>接着就可以进行路由的相关操作，如路由跳转useRouter。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import &#123; useRouter &#125; from &quot;vue-router&quot;;</span><br><span class="line">const router = useRouter();</span><br><span class="line">const onSubmit = () =&gt; &#123;</span><br><span class="line">    ...</span><br><span class="line">    if(token.getStore(&quot;type&quot;))&#123;</span><br><span class="line">        // 跳转欢迎页</span><br><span class="line">        router.push(&quot;/home&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-基础模块"><a href="#2-3-基础模块" class="headerlink" title="2.3 基础模块"></a>2.3 基础模块</h4><p>在构建各页面前，得将基础模块构建完毕，包括侧面导航栏、面包屑等。</p><p>侧面导航栏我直接在组件库menu里面选择了collapse折叠面板。</p><p>具体实现过程如下，参考element-plus组件库中的menu组件，自己选择喜欢的样式，然后选中对应代码复制即可。我这里在views文件夹下新建Home文件夹，将代码copy到index.vue下。</p><p>（考虑到代码过多，我直接截取部分，样式部分我就不展示了）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;menu&quot;&gt;</span><br><span class="line">    &lt;!-- 左侧菜单栏 --&gt;</span><br><span class="line">    &lt;el-radio-group v-model=&quot;isCollapse&quot; style=&quot;margin-bottom: 20px&quot;&gt;</span><br><span class="line">        &lt;el-radio-button :label=&quot;false&quot;&gt;展开&lt;/el-radio-button&gt;</span><br><span class="line">        &lt;el-radio-button :label=&quot;true&quot;&gt;折叠&lt;/el-radio-button&gt;</span><br><span class="line">    &lt;/el-radio-group&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;el-menu</span><br><span class="line">        default-active=&quot;1&quot;</span><br><span class="line">        class=&quot;el-menu-vertical-demo&quot;</span><br><span class="line">        :collapse=&quot;isCollapse&quot;</span><br><span class="line">    &gt;</span><br><span class="line">        &lt;el-menu-item index=&quot;1&quot;&gt;</span><br><span class="line">            &lt;el-icon&gt;&lt;House /&gt;&lt;/el-icon&gt;</span><br><span class="line">            &lt;template #title&gt;&lt;router-link to=&quot;/home/welcome&quot;&gt;欢迎&lt;/router-link&gt;&lt;/template&gt;</span><br><span class="line">        &lt;/el-menu-item&gt;</span><br><span class="line">        &lt;el-menu-item index=&quot;2&quot;&gt;</span><br><span class="line">            &lt;el-icon&gt;&lt;icon-menu /&gt;&lt;/el-icon&gt;</span><br><span class="line">            &lt;template #title&gt;&lt;router-link to=&quot;/home/connect&quot;&gt;联邦学习&lt;/router-link&gt;&lt;/template&gt;</span><br><span class="line">        &lt;/el-menu-item&gt;</span><br><span class="line">        &lt;el-sub-menu index=&quot;3&quot;&gt;</span><br><span class="line">            &lt;template #title&gt;</span><br><span class="line">                &lt;el-icon&gt;&lt;icon-menu /&gt;&lt;/el-icon&gt;</span><br><span class="line">                &lt;span&gt;碳金融&lt;/span&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">            &lt;el-sub-menu index=&quot;3-1&quot;&gt;</span><br><span class="line">                &lt;template #title&gt;&lt;span&gt;碳审核&lt;/span&gt;&lt;/template&gt;</span><br><span class="line">                &lt;el-menu-item index=&quot;3-1-1&quot;&gt;新建&lt;/el-menu-item&gt;</span><br><span class="line">                &lt;el-menu-item index=&quot;3-1-2&quot;&gt;查询&lt;/el-menu-item&gt;</span><br><span class="line">            &lt;/el-sub-menu&gt;</span><br><span class="line">            &lt;el-sub-menu index=&quot;3-2&quot;&gt;</span><br><span class="line">                &lt;template #title&gt;&lt;span&gt;碳交易&lt;/span&gt;&lt;/template&gt;</span><br><span class="line">                &lt;el-menu-item index=&quot;3-2-1&quot;&gt;开户&lt;/el-menu-item&gt;</span><br><span class="line">                &lt;el-menu-item index=&quot;3-2-2&quot;&gt;查询&lt;/el-menu-item&gt;</span><br><span class="line">                &lt;el-menu-item index=&quot;3-2-3&quot;&gt;转账&lt;/el-menu-item&gt;</span><br><span class="line">                &lt;el-menu-item index=&quot;3-2-4&quot;&gt;记录&lt;/el-menu-item&gt;</span><br><span class="line">            &lt;/el-sub-menu&gt;</span><br><span class="line">        &lt;/el-sub-menu&gt;</span><br><span class="line">    &lt;/el-menu&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>这里我结合多种组件的特性，主要包括菜单的可折叠（collapse）、多级菜单（sub-menu与menu-item）。</p><p>我这里设置菜单默认是展开的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const isCollapse = ref(false);</span><br></pre></td></tr></table></figure><p>接着根据菜单栏的对应页面，创建对应的页面组件，同时配置对应的路由（参考2.2），我这里菜单栏的页面跳转使用的是router-link。</p><p>这里值得注意的是在路由配置中，&#x2F; 的使用得极其慎重，在children中，一般不以 &#x2F; 开头。原因在于 &#x2F; 代表的是绝对路径，不以  &#x2F; 开头则是相对路径。</p><p>接着是数据展示，直接使用router-view即可，与router-link进行配对，我们布局设置是左侧菜单栏，右侧数据展示的传统配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;content&quot;&gt;</span><br><span class="line">    &lt;!-- 数据展示 --&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>现在大家只需根据个人情况在对应的页面填充即可，但是大家可能还会用到面包屑，所以我进行简要描述一下。</p><p>在路由配置中，我其实已经给每个路由meta中设置了对应的title，此目的在于面包屑展示的前提是获取跳转的页面的数据。</p><p>然后我们在components下新建Breadcrumb文件，route的matched到的是一个数组，里面存的就是获取到的路由对象，面包屑展示的就是每个路由对象（item）的meta的title属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-breadcrumb :separator-icon=&quot;ArrowRight&quot;&gt;</span><br><span class="line">    &lt;el-breadcrumb-item v-for=&quot;(item, index) in $route.matched&quot; :key=&quot;index&quot; :to=&quot;&#123; path: item.path &#125;&quot;&gt;</span><br><span class="line">        &#123;&#123; item.meta.title &#125;&#125;</span><br><span class="line">    &lt;/el-breadcrumb-item&gt;</span><br><span class="line">&lt;/el-breadcrumb&gt;</span><br></pre></td></tr></table></figure><p>这里我们发现面包屑应该是个全局组件，那我们在main.js里面导入组件，同时注册全局组件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 导入面包屑组件</span><br><span class="line">import Breadcrumb from &#x27;./components/Breadcrumb.vue&#x27;;</span><br><span class="line"></span><br><span class="line">// 注册全局组件</span><br><span class="line">app</span><br><span class="line">  .component(&#x27;Breadcrumb&#x27;, Breadcrumb)</span><br><span class="line">  </span><br><span class="line">app.use(router).use(store).use(ElementPlus).mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure><p>然后哪个页面使用，直接使用即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> &lt;!-- 使用面包屑组件 --&gt;</span><br><span class="line">&lt;Breadcrumb&gt;&lt;/Breadcrumb&gt;</span><br></pre></td></tr></table></figure><h3 id="三、常见细节"><a href="#三、常见细节" class="headerlink" title="三、常见细节"></a>三、常见细节</h3><h4 id="3-1-样式配置"><a href="#3-1-样式配置" class="headerlink" title="3.1 样式配置"></a>3.1 样式配置</h4><p>虽然大部分样式都是根据个人情况设置，但仍然存在一些必需的样式，我这里将自己所认为的配置进行举例。</p><p>在Home中，配置的样式其实是会影响所有页面的，那直接在这里配置数据的展示情况、菜单栏的属性都是必须的。</p><p>让整个页面的展示使用flex布局，同时考虑到我做的是网页端，还需设置最小宽度。菜单栏需要设置固定宽度、最小高度及加上盒子尺寸。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.container&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    min-width: 1280px;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">&#125;</span><br><span class="line">.menu&#123;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-图表使用"><a href="#3-2-图表使用" class="headerlink" title="3.2 图表使用"></a>3.2 图表使用</h4><p>这里我使用的是echarts，大家有其他喜欢的也可以，本人使用echarts原因主要胜在其“悠久”。</p><p>大家直接去它模板库选择自己合适的就行（<a href="https://echarts.apache.org/examples/en/index.html%EF%BC%89%EF%BC%8C%E6%88%91%E8%BF%99%E9%87%8C%E5%85%B6%E5%AE%9E%E5%8F%AA%E6%9C%89%E8%81%94%E9%82%A6%E5%AD%A6%E4%B9%A0%E7%89%88%E5%9D%97%E8%AE%AD%E7%BB%83%E6%95%B0%E6%8D%AE%E6%97%B6%E9%9C%80%E8%A6%81%E5%B1%95%E7%A4%BA%E5%90%84%E9%98%B6%E6%AE%B5%E8%AE%AD%E7%BB%83%E6%95%B0%E6%8D%AE%EF%BC%8C%E6%89%80%E4%BB%A5%E7%9B%B4%E6%8E%A5%E9%87%87%E7%94%A8%E4%BA%86%E6%8A%98%E7%BA%BF%E5%9B%BE%E3%80%82">https://echarts.apache.org/examples/en/index.html），我这里其实只有联邦学习版块训练数据时需要展示各阶段训练数据，所以直接采用了折线图。</a></p><p>使用前先安装相关库，注意这是vue3。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install echarts vue-echarts</span><br></pre></td></tr></table></figure><p>接着我使用了全局引入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//引入ECharts</span><br><span class="line">import VueECharts from &#x27;vue-echarts&#x27;</span><br><span class="line">import &#x27;echarts&#x27;</span><br><span class="line"></span><br><span class="line">// 注册全局组件</span><br><span class="line">app</span><br><span class="line">  .component(&#x27;v-chart&#x27;, VueECharts)</span><br></pre></td></tr></table></figure><p>虽然折线图只在平台一个地方使用，但是为了后续的模块化管理，我还是和面包屑一样单独做成一个组件。</p><p>这里我使用了vue3新的组件数据传递方式<strong>defineProps</strong>，用于在子组件中定义接收哪些父组件的props。当父组件（联邦学习版块）的props发生变化时，子组件（折线图）也会随之响应。</p><p>在子组件声明该组件需要接收的props，它需要传递一个包含props字段的对象，每个字段表示该props的默认值和类型等信息。同时我定义了一个可以修改数据的方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;v-chart autoresize ref=&quot;charts&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    import &#123;defineProps, ref, onMounted, defineExpose&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">    const charts = ref()</span><br><span class="line">    const props = defineProps(&#123;</span><br><span class="line">        option: &#123;</span><br><span class="line">            type: Object</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    const setOption = (option) =&gt; &#123;</span><br><span class="line">        charts.value.setOption(&#123;</span><br><span class="line">            tooltip: &#123;</span><br><span class="line">                trigger: &#x27;axis&#x27;,</span><br><span class="line">                axisPointer: &#123;</span><br><span class="line">                    type: &#x27;shadow&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            grid: &#123;</span><br><span class="line">                left: &#x27;3%&#x27;,</span><br><span class="line">                right: &#x27;4%&#x27;,</span><br><span class="line">                bottom: &#x27;3%&#x27;,</span><br><span class="line">                containLabel: true</span><br><span class="line">            &#125;,</span><br><span class="line">            xAxis: [</span><br><span class="line">                &#123;</span><br><span class="line">                    type: &#x27;category&#x27;,</span><br><span class="line">                    data: option.colChartsName,</span><br><span class="line">                    axisTick: &#123;</span><br><span class="line">                        alignWithLabel: true</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            yAxis: [</span><br><span class="line">                &#123;</span><br><span class="line">                    type: &#x27;value&#x27;,</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            series: [</span><br><span class="line">                &#123;</span><br><span class="line">                    // name: option.RoundNumber,</span><br><span class="line">                    type: &#x27;line&#x27;,</span><br><span class="line">                    data: option.colChartsData</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    onMounted(() =&gt; &#123;</span><br><span class="line">        setOption(props.option)</span><br><span class="line">    &#125;)</span><br><span class="line">    //导出方法给父组件使用</span><br><span class="line">    defineExpose(&#123;</span><br><span class="line">        setOption</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>这里需要在main.js里面导入组件，同时注册全局组件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 导入折线图</span><br><span class="line">import ELine from &#x27;./components/ELine.vue&#x27;;</span><br><span class="line"></span><br><span class="line">// 注册全局组件</span><br><span class="line">app</span><br><span class="line">  .component(&#x27;ELine&#x27;, ELine)</span><br></pre></td></tr></table></figure><p>接着直接在父组件使用即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;ELine :option=&quot;option&quot; ref=&quot;charts&quot;&gt;&lt;/ELine&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">    let roundNum = new Array();</span><br><span class="line">    let acc = new Array();</span><br><span class="line">    const charts = ref();</span><br><span class="line">    const option = ref(&#123;</span><br><span class="line">        colChartsName: [],</span><br><span class="line">        colChartsData: [],</span><br><span class="line">        colUnitName: &quot;&quot;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    const refresh = () =&gt; &#123;</span><br><span class="line">        roundNum = [];</span><br><span class="line">        acc.splice(0);</span><br><span class="line">        getResult().then((res) =&gt; &#123;</span><br><span class="line">            for(let i = 0; i &lt; res?.data.result.length; i++)&#123;</span><br><span class="line">                roundNum.push(res.data.result[i].RoundNumber);</span><br><span class="line">                acc.push(res.data.result[i].Accuracy * 100);</span><br><span class="line">            &#125;</span><br><span class="line">            option.value.colChartsName = roundNum;</span><br><span class="line">            option.value.colChartsData = acc;</span><br><span class="line">            //调用子组件的方法</span><br><span class="line">            charts.value.setOption(option.value)     </span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="3-3-粘贴复制"><a href="#3-3-粘贴复制" class="headerlink" title="3.3 粘贴复制"></a>3.3 粘贴复制</h4><p>我们经常在一些地方见到对某些信息的展示与copy功能，此平台在合约模板版块对各种合约的代码提供copy功能。主要流程是用户点击按钮，展示相关代码，用户可以选择copy，成功复制后右上角出现信息弹窗。我在这里简述一下关键实现步骤。</p><p>首先各合约简要信息使用el-card进行展示，点击按钮后，信息弹出使用el-dialog。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;!-- dialogVisible用于控制弹窗的关闭与否 --&gt;</span><br><span class="line">    &lt;el-dialog</span><br><span class="line">        v-model=&quot;dialogVisible&quot;</span><br><span class="line">        title=&quot;Code&quot;</span><br><span class="line">        width=&quot;90%&quot;</span><br><span class="line">        :before-close=&quot;handleClose&quot;</span><br><span class="line">    &gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123;msgCode&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;template #footer&gt;</span><br><span class="line">            &lt;span class=&quot;dialog-footer&quot;&gt;</span><br><span class="line">                &lt;el-button @click=&quot;dialogVisible = false&quot;&gt;取消&lt;/el-button&gt;</span><br><span class="line">                &lt;el-button plain type=&quot;primary&quot; @click=&quot;copyCode&quot;&gt;</span><br><span class="line">                    复制</span><br><span class="line">                &lt;/el-button&gt;</span><br><span class="line">            &lt;/span&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">    &lt;/el-dialog&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>其中，这个copyCode方法很重要，完成对信息的copy，具体解释看博客相关对应文档。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const copyCode = () =&gt; &#123;</span><br><span class="line">    dialogVisible.value = false;</span><br><span class="line">    const textarea = document.createElement(&quot;textarea&quot;);</span><br><span class="line">    textarea.value = msgCode.value;</span><br><span class="line">    document.body.appendChild(textarea);</span><br><span class="line">    textarea.select();</span><br><span class="line">    document.execCommand(&#x27;copy&#x27;)</span><br><span class="line">    document.body.removeChild(textarea);</span><br><span class="line">    ElNotification(&#123;</span><br><span class="line">        title: &#x27;Info&#x27;,</span><br><span class="line">        message: &#x27;已成功复制到粘贴板&#x27;,</span><br><span class="line">        type: &#x27;info&#x27;,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ElNotification是element-plus的一个组件。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建简易教程</title>
      <link href="/2024/01/08/Blog%E6%90%AD%E5%BB%BA/"/>
      <url>/2024/01/08/Blog%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="Blog实战搭建"><a href="#Blog实战搭建" class="headerlink" title="Blog实战搭建"></a>Blog实战搭建</h2><p>2024.01.08 突然想简易搭建一个个人博客，存放自己之前的学习笔记，同时方便自己对之前开发的项目进行梳理。</p><p>博客搭建使用的是Hexo框架，主要是好看。</p><p>官方安装地址：<a href="https://hexo.io/zh-cn/docs/%EF%BC%8C%E5%A6%82%E6%9E%9C%E4%B8%8D%E6%98%AF%E5%BE%88%E7%90%86%E8%A7%A3%EF%BC%8C%E7%9B%B4%E6%8E%A5%E7%9C%8B%E6%88%91%E5%8F%8B%E9%93%BE%EF%BC%88Fomalhaut%EF%BC%89%E7%9A%84%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2%E6%96%87%E7%AB%A0%EF%BC%9Ahttps://www.fomal.cc/posts/e593433d.html%E3%80%82">https://hexo.io/zh-cn/docs/，如果不是很理解，直接看我友链（Fomalhaut）的环境部署文章：https://www.fomal.cc/posts/e593433d.html。</a></p><p>使用git生成ssh公钥，本地 .ssh&#x2F;id_rsa.pub 文件下复制，在GitHub进行生成SSH key。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure><p>接着进行测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>这是我个人的GitHub相关代码仓库地址：xxx。</p><h3 id="一、Vercel部署"><a href="#一、Vercel部署" class="headerlink" title="一、Vercel部署"></a>一、Vercel部署</h3><p>Vercel是一个云计算平台，主要用于托管、构建和部署静态网站和单页面应用程序。</p><p>使用GitHub账户关联登录后，创建新项目，将GitHub仓库中存储静态博客的代码import进来。</p><p>将项目进行部署（deploy）后，跳转到控制面板。</p><p>接着将自己的域名添加解析记录，我个人购买的是阿里云的域名，在域名控制台&#x2F;域名解析&#x2F;解析设置里面，添加对应的解析记录（包括主机记录、记录类型、记录值）。</p><p><img src="C:\Users\thinkpad\AppData\Roaming\Typora\typora-user-images\image-20240111150541195.png" alt="image-20240111150541195"></p><p>接着就可以直接输入域名看到自己的个人博客初始界面了，这是不想买服务器的人的福音。</p><p>注意：在自己博客代码的_config.yml文件中需将url改成自己的新域名。</p><h3 id="二、主题安装及设置"><a href="#二、主题安装及设置" class="headerlink" title="二、主题安装及设置"></a>二、主题安装及设置</h3><ul><li>安装butterfly主题：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-theme-butterfly</span><br></pre></td></tr></table></figure><p>安装成功后可在blog-demo&#x2F;node_modules文件夹下找到hexo-theme-butterfly文件夹。</p><ul><li><p>相关设置：</p><ul><li><p>_config.yml文件中修改主题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure></li><li><p>安装两个渲染器，是生成基础页面所需的依赖包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure></li><li><p>由于个人博客搭建完毕后，不会进行页面二次大改，因此需要减少主题升级后可能带来的问题</p><p>找到blog-demo&#x2F;node_modules&#x2F;hexo-theme-butterfly中的 _config.yml文件，复制到根目录blog-demo下，</p><p>这里重命名为_config.butterfly.yml。</p></li></ul></li><li><p>基础用法</p><ul><li><p>Front-matter</p><table><thead><tr><th>属性</th><th>含义</th></tr></thead><tbody><tr><td>title</td><td>页面标题</td></tr><tr><td>date</td><td>创建日期</td></tr><tr><td>type</td><td>标签、分类、友情链接需要配置</td></tr><tr><td>comments</td><td>是否显示评论模块</td></tr><tr><td>updated</td><td>更新日期</td></tr><tr><td>description</td><td>描述</td></tr></tbody></table></li><li><p>标签页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>在\source\tags\index.md下，添加type: “tags”。</p></li><li><p>友情链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page link</span><br></pre></td></tr></table></figure><p>在\source\link\index.md下，添加type: “link”</p></li><li><p>\source的_data创建一个link.yml文件（如果沒有 _data 文件夹，请自行创建），并写入相关信息，下面是我的参考信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">- class_name: 1.技术支持</span><br><span class="line">  class_desc: 本网站的搭建由以下开源作者提供技术支持</span><br><span class="line">  link_list: </span><br><span class="line">    - name: Hexo </span><br><span class="line">      link: https://hexo.io/zh-cn/</span><br><span class="line">      avatar: https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg</span><br><span class="line">      descr: 快速、简单且强大的网志框架</span><br><span class="line">      siteshot: https://source.fomal.cc/siteshot/hexo.io.jpg</span><br><span class="line">      </span><br><span class="line">- class_name: 2.友情链接</span><br><span class="line">  class_desc: 一些朋友</span><br><span class="line">  link_list:</span><br><span class="line">    - name: Fomalhaut🥝</span><br><span class="line">      link: https://fomal.cc/</span><br><span class="line">      avatar: /assets/head.jpg</span><br><span class="line">      descr: 博客搭建参考作者</span><br><span class="line">      siteshot: https://source.fomal.cc/siteshot/www.fomal.cn.jpg</span><br></pre></td></tr></table></figure></li><li><p>全局搜索</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>_config.yml站点配置文件中进行对应修改。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  content: true</span><br></pre></td></tr></table></figure></li><li></li></ul></li><li><p>主题设置</p><p>所有设置均在_config.butterfly.yml主题配置文件中进行选择配置</p><ul><li><p>menu</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">首页: / || fas fa-home</span><br><span class="line">  归档: /archives/ || fas fa-archive</span><br><span class="line">  标签: /tags/ || fas fa-tags</span><br><span class="line">  分类: /categories/ || fas fa-folder-open</span><br><span class="line">  列表||fas fa-list:</span><br><span class="line">    音乐: /music/ || fas fa-music</span><br><span class="line">    视频: /movies/ || fas fa-video</span><br><span class="line">  友链: /link/ || fas fa-link</span><br><span class="line">  关于: /about/ || fas fa-heart</span><br></pre></td></tr></table></figure><p>并在source文件下创建对应的文件夹。</p></li><li><p>其他设置</p><table><thead><tr><th>属性</th><th>设置</th></tr></thead><tbody><tr><td>social</td><td>个人社交账号展示。</td></tr><tr><td>error_404</td><td>报错页面</td></tr><tr><td>local search</td><td>本地搜索</td></tr><tr><td>favicon</td><td>网站图标</td></tr><tr><td>avatar</td><td>头像</td></tr><tr><td>cover</td><td>文章封面</td></tr><tr><td>post_meta</td><td>文章相关属性</td></tr><tr><td>toc</td><td>目录</td></tr><tr><td>noticeOutdate</td><td>文章过期提醒</td></tr><tr><td>canvas_nest</td><td>true</td></tr><tr><td>beautify</td><td>自定义大标题前面的图标</td></tr><tr><td>hr_icon</td><td>分割线图标</td></tr><tr><td>subtitle</td><td>副标题</td></tr><tr><td>aside</td><td>侧边栏</td></tr><tr><td>translate</td><td>语言转换</td></tr><tr><td>darkmode</td><td>黑夜模式</td></tr><tr><td>readmode</td><td>阅读模式</td></tr><tr><td>aplayerInject</td><td>音乐插件</td></tr><tr><td>snackbar</td><td>弹窗</td></tr><tr><td>instantpage</td><td>预加载</td></tr><tr><td>pangu</td><td>中英文之间加空格</td></tr><tr><td>lazyload</td><td>图片懒加载</td></tr><tr><td>index_img</td><td>文章主页图片</td></tr></tbody></table></li></ul></li></ul><h3 id="三、特色"><a href="#三、特色" class="headerlink" title="三、特色"></a>三、特色</h3><h4 id="3-1-live-2D看板"><a href="#3-1-live-2D看板" class="headerlink" title="3.1 live-2D看板"></a>3.1 live-2D看板</h4><p>博客自带的看板娘，消耗资源少，因此使用。</p><p>以管理员身份安装对应依赖。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure><p>安装所喜欢的样式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save live2d-widget-model-wanko/live2d-widget-model-koharu</span><br></pre></td></tr></table></figure><p>在站点配置文件<code>_config.yml</code>添加配置项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># Live2D</span><br><span class="line">## https://github.com/EYHN/hexo-helper-live2d</span><br><span class="line">live2d:</span><br><span class="line">  enable: true #开关插件版看板娘</span><br><span class="line">  scriptFrom: local # 默认</span><br><span class="line">  pluginRootPath: live2dw/ # 插件在站点上的根目录(相对路径)</span><br><span class="line">  pluginJsPath: lib/ # 脚本文件相对与插件根目录路径</span><br><span class="line">  pluginModelPath: assets/ # 模型文件相对与插件根目录路径</span><br><span class="line">  # scriptFrom: jsdelivr # jsdelivr CDN</span><br><span class="line">  # scriptFrom: unpkg # unpkg CDN</span><br><span class="line">  # scriptFrom: https://npm.elemecdn.com/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url</span><br><span class="line">  tagMode: false # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span><br><span class="line">  debug: false # 调试, 是否在控制台输出日志</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-wanko # npm-module package name</span><br><span class="line">    # use: wanko # 博客根目录/live2d_models/ 下的目录名</span><br><span class="line">    # use: ./wives/wanko # 相对于博客根目录的路径</span><br><span class="line">    # use: https://npm.elemecdn.com/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url</span><br><span class="line">  display:</span><br><span class="line">    position: left #控制看板娘位置</span><br><span class="line">    width: 150 #控制看板娘大小</span><br><span class="line">    height: 300 #控制看板娘大小</span><br><span class="line">  mobile:</span><br><span class="line">    show: false # 手机中是否展示</span><br></pre></td></tr></table></figure><h4 id="3-2-留言板"><a href="#3-2-留言板" class="headerlink" title="3.2 留言板"></a>3.2 留言板</h4><p>安装指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-butterfly-envelope --save</span><br></pre></td></tr></table></figure><p>在站点配置文件<code>_config.yml</code>添加配置项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># envelope_comment</span><br><span class="line"># see https://akilar.top/posts/e2d3c450/</span><br><span class="line">envelope_comment:</span><br><span class="line">  enable: true #控制开关</span><br><span class="line">  custom_pic:      </span><br><span class="line">    cover: https://npm.elemecdn.com/hexo-butterfly-envelope/lib/violet.jpg #信笺头部图片</span><br><span class="line">    line: https://npm.elemecdn.com/hexo-butterfly-envelope/lib/line.png #信笺底部图片</span><br><span class="line">    beforeimg: https://npm.elemecdn.com/hexo-butterfly-envelope/lib/before.png # 信封前半部分</span><br><span class="line">    afterimg: https://npm.elemecdn.com/hexo-butterfly-envelope/lib/after.png # 信封后半部分</span><br><span class="line">  message: #信笺正文，多行文本，写法如下</span><br><span class="line">    - 有什么想问的？</span><br><span class="line">    - 有什么想说的？</span><br><span class="line">    - 有什么想吐槽的？</span><br><span class="line">    - 哪怕是有什么想吃的，都可以告诉我哦~</span><br><span class="line">  bottom: 自动书记人偶竭诚为您服务！ #仅支持单行文本</span><br><span class="line">  height: #1050px，信封划出的高度</span><br><span class="line">  path: #【可选】comments 的路径名称。默认为 comments，生成的页面为 comments/index.html</span><br><span class="line">  front_matter: #【可选】comments页面的 front_matter 配置</span><br><span class="line">    title: 留言板</span><br><span class="line">    comments: true</span><br></pre></td></tr></table></figure><h4 id="3-3-一图流"><a href="#3-3-一图流" class="headerlink" title="3.3 一图流"></a>3.3 一图流</h4><p>在source文件夹下新建css文件夹，创建一个css文件。</p><p>此css文件代码如下，主要是将顶部图和页脚不要的元素设置为透明。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/* 页脚与头图透明 */</span><br><span class="line">#footer &#123;</span><br><span class="line">  background: transparent !important;</span><br><span class="line">&#125;</span><br><span class="line">#page-header &#123;</span><br><span class="line">  background: transparent !important;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 白天模式遮罩透明 */</span><br><span class="line">#footer::before &#123;</span><br><span class="line">  background: transparent !important;</span><br><span class="line">&#125;</span><br><span class="line">#page-header::before &#123;</span><br><span class="line">  background: transparent !important;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 夜间模式遮罩透明 */</span><br><span class="line">[data-theme=&quot;dark&quot;] #footer::before &#123;</span><br><span class="line">  background: transparent !important;</span><br><span class="line">&#125;</span><br><span class="line">[data-theme=&quot;dark&quot;] #page-header::before &#123;</span><br><span class="line">  background: transparent !important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着在主题配置文件的inject配置项head中引入刚刚自己创建的css文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/custom.css&quot; media=&quot;defer&quot; onload=&quot;this.media=&#x27;all&#x27;&quot;&gt;</span><br></pre></td></tr></table></figure><p>同时将index_img和footer_bg配置项取消头图与页脚图的加载项，避免冗余加载。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># The banner image of home page</span><br><span class="line">index_img: </span><br><span class="line"></span><br><span class="line"># Footer Background</span><br><span class="line">footer_bg: false</span><br></pre></td></tr></table></figure><h4 id="3-4-页脚徽标与计时器"><a href="#3-4-页脚徽标与计时器" class="headerlink" title="3.4 页脚徽标与计时器"></a>3.4 页脚徽标与计时器</h4><p>安装插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-butterfly-footer-beautify --save</span><br></pre></td></tr></table></figure><p>站点配置文件添加配置信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"># footer_beautify</span><br><span class="line"># 页脚计时器：[Native JS Timer](https://akilar.top/posts/b941af/)</span><br><span class="line"># 页脚徽标：[Add Github Badge](https://akilar.top/posts/e87ad7f8/)</span><br><span class="line">footer_beautify:</span><br><span class="line">  enable:</span><br><span class="line">    timer: true # 计时器开关</span><br><span class="line">    bdage: true # 徽标开关</span><br><span class="line">  priority: 5 #过滤器优先权</span><br><span class="line">  enable_page: all # 应用页面</span><br><span class="line">  exclude: #屏蔽页面</span><br><span class="line">    # - /posts/</span><br><span class="line">    # - /about/</span><br><span class="line">  layout: # 挂载容器类型</span><br><span class="line">    type: id</span><br><span class="line">    name: footer-wrap</span><br><span class="line">    index: 0</span><br><span class="line">  # 计时器部分配置项（看你喜欢哪个，下载下来放到自己的source文件夹下）</span><br><span class="line">  # 这是我的  </span><br><span class="line">  runtime_js: /js/runtime.js</span><br><span class="line">  # 徽标部分配置项</span><br><span class="line">  swiperpara: 0 #若非0，则开启轮播功能，每行徽标个数</span><br><span class="line">  bdageitem:</span><br><span class="line">    - link: https://hexo.io/ #徽标指向网站链接</span><br><span class="line">      shields: https://img.shields.io/badge/Frame-Hexo-blue?style=flat&amp;logo=hexo #徽标API</span><br><span class="line">      message: 博客框架为Hexo_v6.2.0 #徽标提示语</span><br><span class="line">    - link: https://butterfly.js.org/</span><br><span class="line">      shields: https://img.shields.io/badge/Theme-Butterfly-6513df?style=flat&amp;logo=bitdefender</span><br><span class="line">      message: 主题版本Butterfly_v4.3.1</span><br><span class="line">    - link: https://vercel.com/</span><br><span class="line">      shields: https://img.shields.io/badge/Hosted-Vercel-brightgreen?style=flat&amp;logo=Vercel</span><br><span class="line">      message: 本站采用多线部署，主线路托管于Vercel</span><br><span class="line">    - link: https://dashboard.4everland.org/</span><br><span class="line">    # https://img.shields.io/badge/Hosted-4EVERLAND-3FE2C1?style=flat&amp;logo=IPFS</span><br><span class="line">      shields: https://img.shields.io/badge/Hosted-4EVERLAND-22DDDD?style=flat&amp;logo=IPFS</span><br><span class="line">      message: 本站采用多线部署，备用线路托管于4EVERLAND</span><br><span class="line">    - link: https://github.com/</span><br><span class="line">      shields: https://img.shields.io/badge/Source-Github-d021d6?style=flat&amp;logo=GitHub</span><br><span class="line">      message: 本站项目由Github托管</span><br><span class="line">    - link: http://creativecommons.org/licenses/by-nc-sa/4.0/</span><br><span class="line">      shields: https://img.shields.io/badge/Copyright-BY--NC--SA%204.0-d42328?style=flat&amp;logo=Claris</span><br><span class="line">      message: 本站采用知识共享署名-非商业性使用-相同方式共享4.0国际许可协议进行许可</span><br><span class="line">  swiper_css: https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper.min.css</span><br><span class="line">  swiper_js: https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper.min.js</span><br><span class="line">  swiperbdage_init_js: https://npm.elemecdn.com/hexo-butterfly-footer-beautify/lib/swiperbdage_init.min.js</span><br></pre></td></tr></table></figure><p>对应的配置项说明如下。</p><table><thead><tr><th>参数</th><th>值</th><th>含义</th></tr></thead><tbody><tr><td>priority</td><td>数值</td><td>过滤器优先级，数值越小，执行越早，默认为10，选填</td></tr><tr><td>enable.timer</td><td>bool</td><td>【必选】计时器控制开关</td></tr><tr><td>enable.bdage</td><td>bool</td><td>【必选】徽标控制开关</td></tr><tr><td>enable_page</td><td>path</td><td>填写想要应用的页面,如根目录就填’&#x2F;‘,分类页面就填 ’&#x2F;categories&#x2F;‘ ，默认为all</td></tr><tr><td>exclude</td><td>path</td><td>填写想要屏蔽的页面，可以多个。仅当enable_page为’all’时生效。</td></tr><tr><td>layout.type</td><td>id&#x2F;class</td><td>挂载容器类型，填写id或class，不填则默认为id</td></tr><tr><td>layout.name</td><td>text</td><td>【必选】挂载容器名称</td></tr><tr><td>layout.index</td><td>自然数</td><td>前提是layout.type为class，用来确认究竟排在第几个顺位</td></tr><tr><td>runtime_js</td><td>url</td><td>【必选】页脚计时器脚本，可参考<a href="https://akilar.top/posts/b941af/">https://akilar.top/posts/b941af/</a></td></tr><tr><td>runtime_css</td><td>url</td><td>自定义样式，预留开发者接口</td></tr><tr><td>swiperpara</td><td>数值</td><td>若非零，则开启轮播功能，此项表示每行最多容纳徽标个数，用来应对徽标过多显得页脚拥挤的问题</td></tr><tr><td>bdageitem.link</td><td>url</td><td>页脚徽标指向的网站链接</td></tr><tr><td>bdageitem.shields</td><td>url</td><td>【必选】页脚徽标对应的API，API具体写法示例参照<a href="https://akilar.top/posts/e87ad7f8/">https://akilar.top/posts/e87ad7f8/</a></td></tr><tr><td>bdageitem.message</td><td>text</td><td>页脚徽标悬停时显示的信息</td></tr><tr><td>swiper_css</td><td>url</td><td>swiper的依赖</td></tr><tr><td>swiper_js</td><td>url</td><td>swiper的依赖</td></tr><tr><td>swiperbdage_init_js</td><td>url</td><td>swiper初始化方法</td></tr></tbody></table><p>计时器后续需要下载自己的样式！</p><h4 id="3-5-磁铁新版（失败）"><a href="#3-5-磁铁新版（失败）" class="headerlink" title="3.5 磁铁新版（失败）"></a>3.5 磁铁新版（失败）</h4><p>安装插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-magnet --save</span><br></pre></td></tr></table></figure><p>站点配置文件添加配置信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">magnet:</span><br><span class="line">  enable: true</span><br><span class="line">  priority: 1</span><br><span class="line">  enable_page: /</span><br><span class="line">  type: categories</span><br><span class="line">  devide: 2</span><br><span class="line">  display:</span><br><span class="line">    - name: 教程</span><br><span class="line">      display_name: 小冰の魔改教程</span><br><span class="line">      icon: 📚</span><br><span class="line">    - name: 游戏评测</span><br><span class="line">      display_name: 小冰の游戏评测</span><br><span class="line">      icon: 🎮</span><br><span class="line">    - name: 生活趣闻</span><br><span class="line">      display_name: 小冰の生活趣闻</span><br><span class="line">      icon: 🐱‍👓</span><br><span class="line">    - name: vue</span><br><span class="line">      display_name: 小冰の编程学习</span><br><span class="line">      icon: 👩‍💻</span><br><span class="line">    - name: 学习</span><br><span class="line">      display_name: 小冰の读书笔记</span><br><span class="line">      icon: 📒</span><br><span class="line">    - name: 随想</span><br><span class="line">      display_name: 小冰の胡思乱想</span><br><span class="line">      icon: 💡</span><br><span class="line">  color_setting:</span><br><span class="line">    text_color: black</span><br><span class="line">    text_hover_color: white</span><br><span class="line">    background_color: &quot;#f2f2f2&quot;</span><br><span class="line">    background_hover_color: &quot;#b30070&quot;</span><br><span class="line">  layout:</span><br><span class="line">    type: id</span><br><span class="line">    name: recent-posts</span><br><span class="line">    index: 0</span><br><span class="line">  temple_html: &#x27;&lt;div class=&quot;recent-post-item&quot; style=&quot;width:100%;height: auto&quot;&gt;&lt;div id=&quot;catalog_magnet&quot;&gt;$&#123;temple_html_item&#125;&lt;/div&gt;&lt;/div&gt;&#x27;</span><br><span class="line">  plus_style: &quot;&quot;</span><br></pre></td></tr></table></figure><h4 id="3-6-置顶滚动栏"><a href="#3-6-置顶滚动栏" class="headerlink" title="3.6 置顶滚动栏"></a>3.6 置顶滚动栏</h4><p>安装插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-butterfly-swiper --save</span><br></pre></td></tr></table></figure><p>站点配置文件添加配置信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">swiper:</span><br><span class="line">  enable: true # 开关</span><br><span class="line">  priority: 5 #过滤器优先权</span><br><span class="line">  enable_page: all # 应用页面</span><br><span class="line">  timemode: date #date/updated</span><br><span class="line">  layout: # 挂载容器类型</span><br><span class="line">    type: id</span><br><span class="line">    name: recent-posts</span><br><span class="line">    index: 0</span><br><span class="line">  default_descr: 再怎么看我也不知道怎么描述它的啦！</span><br><span class="line">  swiper_css: /css/swiper.min.css #swiper css依赖</span><br><span class="line">  swiper_js: /js/swiper.min.js #swiper js依赖</span><br><span class="line">  custom_css: /css/swiperstyle.css # 适配主题样式补丁</span><br><span class="line">  custom_js: /js/swiper_init.js # swiper初始化方法</span><br></pre></td></tr></table></figure><h4 id="3-7-文章双侧栏"><a href="#3-7-文章双侧栏" class="headerlink" title="3.7 文章双侧栏"></a>3.7 文章双侧栏</h4><p>安装插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-butterfly-article-double-row --save</span><br></pre></td></tr></table></figure><p>站点配置文件添加配置信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">butterfly_article_double_row:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><p>在custom.css文件添加以下代码，解决文章数目奇数bug。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/* 翻页按钮居中 */</span><br><span class="line">#pagination &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  margin: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-8-wowjs动画"><a href="#3-8-wowjs动画" class="headerlink" title="3.8 wowjs动画"></a>3.8 wowjs动画</h4><p>安装插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-butterfly-wowjs --save</span><br></pre></td></tr></table></figure><p>站点配置文件添加配置信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">wowjs:</span><br><span class="line">  enable: true #控制动画开关。true是打开，false是关闭</span><br><span class="line">  priority: 10 #过滤器优先级</span><br><span class="line">  mobile: false #移动端是否启用，默认移动端禁用</span><br><span class="line">  animateitem:</span><br><span class="line">    - class: recent-post-item #必填项，需要添加动画的元素的class</span><br><span class="line">      style: animate__zoomIn #必填项，需要添加的动画</span><br><span class="line">      duration: 2s #选填项，动画持续时间，单位可以是ms也可以是s。例如3s，700ms。</span><br><span class="line">      delay: 1s #选填项，动画开始的延迟时间，单位可以是ms也可以是s。例如3s，700ms。</span><br><span class="line">      offset: 100 #选填项，开始动画的距离（相对浏览器底部）</span><br><span class="line">      iteration: 2 #选填项，动画重复的次数</span><br><span class="line">    - class: card-widget</span><br><span class="line">      style: animate__zoomIn</span><br><span class="line">  animate_css: https://npm.elemecdn.com/hexo-butterfly-wowjs/lib/animate.min.css</span><br><span class="line">  wow_js: https://npm.elemecdn.com/hexo-butterfly-wowjs/lib/wow.min.js</span><br><span class="line">  wow_init_js: https://npm.elemecdn.com/hexo-butterfly-wowjs/lib/wow_init.js</span><br></pre></td></tr></table></figure><h4 id="3-9-GitCalendar"><a href="#3-9-GitCalendar" class="headerlink" title="3.9 GitCalendar"></a>3.9 GitCalendar</h4><p>安装插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-filter-gitcalendar --save</span><br></pre></td></tr></table></figure><p>站点配置文件添加配置信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-10"><a href="#3-10" class="headerlink" title="3.10"></a>3.10</h4><h3 id="四、图床"><a href="#四、图床" class="headerlink" title="四、图床"></a>四、图床</h3><h4 id="4-1-github-vercel"><a href="#4-1-github-vercel" class="headerlink" title="4.1 github+vercel"></a>4.1 github+vercel</h4><p>首先在GitHub上新建一个仓库，接着完成本地访问远程仓库的权限配置。</p><p>新建一个存放图片的文件夹，里面存放自己喜欢的图片。</p><p>进入Vercel控制面板新建项目，导入刚刚新建的GitHub仓库，部署。</p><p>进入项目的控制台，添加自己域名的二级域名，并在域名解析控制台添加对应的解析（也可以提前解析，二级域名的ip值和主域名一样）。</p><p>通过<strong>自定义域名+资源路径</strong>即可访问到对应的资源，例如下面的地址可以访问我的图片。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://picbed.currysheep.cn/img/homepage/boating.jpg</span><br></pre></td></tr></table></figure><p>注：更新图片，只要将图片存到对应的图片文件夹里面，然后更新GitHub仓库即可。</p><h4 id="4-2-picgo"><a href="#4-2-picgo" class="headerlink" title="4.2 picgo"></a>4.2 picgo</h4><p>picgo：这是一个用于快速上传图片并获取图片 URL 链接的工具，关键是他可以与Typora配套一起使用，在粘贴图片的同时上传图片，十分方便！</p><p>在此链接<a href="https://github.com/Molunerfinn/PicGo/releases%E4%B8%8B%E8%BD%BD%E6%89%80%E9%9C%80%E7%89%88%E6%9C%AC%E3%80%82">https://github.com/Molunerfinn/PicGo/releases下载所需版本。</a></p><p><img src="https://s1.vika.cn/space/2024/01/15/a0d336d1933f4951a7990ca72d69ff59" alt="image-20240115181432462"></p><p>项目本地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl;hexo s</span><br></pre></td></tr></table></figure><p>部署GitHub</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl;hexo g;hexo d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue3组件间通信方式</title>
      <link href="/2023/10/01/vue3%E7%BB%84%E4%BB%B6%E9%97%B4%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F/"/>
      <url>/2023/10/01/vue3%E7%BB%84%E4%BB%B6%E9%97%B4%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="vue3组件间通信方式"><a href="#vue3组件间通信方式" class="headerlink" title="vue3组件间通信方式"></a>vue3组件间通信方式</h3><h4 id="1-props（父给子）"><a href="#1-props（父给子）" class="headerlink" title="1. props（父给子）"></a>1. props（父给子）</h4><p>props：vue3中，子组件获取数据，直接defineProps([‘xxx’])，即可在模板中使用，但是props是只读的。</p><h4 id="2-自定义事件（子给父）"><a href="#2-自定义事件（子给父）" class="headerlink" title="2. 自定义事件（子给父）"></a>2. 自定义事件（子给父）</h4><p>vue框架事件分为两种：原生DOM事件、自定义事件。</p><p>原生DOM事件会带回调函数，里面必定包含基础的event事件对象。</p><p>在vue3中，原生DOM事件不管放在标签or组件标签上，都是原生DOM事件。</p><p>自定义事件完成父子组件传递数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//子组件Event</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;button @click=&#x27;handler&#x27;)&quot;&gt;</span><br><span class="line">            点击出发自定义事件xxx</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    let a = defineEmits([&#x27;xxx&#x27;])</span><br><span class="line">    const handler = () =&gt; &#123;</span><br><span class="line">        //第一个参数为事件类型xxx，后面为注入数据</span><br><span class="line">        a(&quot;xxx&quot;,&quot;aabb&quot;,&quot;sdd&quot;...)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;Event @xxx=&quot;handler&quot;&gt;</span><br><span class="line">    &lt;/Event&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    import Evenet from &#x27;./Event.vue&#x27;;</span><br><span class="line">    const handler = (event) =&gt; &#123;</span><br><span class="line">        //展示数据</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>####3. 全局事件总线（兄弟之间）</p><p>使用mitt插件。</p><p>安装完成后，新建bus文件夹，里面新建index.ts。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import mitt from &#x27;mitt&#x27;;</span><br><span class="line">const $bus = mitt();</span><br><span class="line">export default $bus</span><br></pre></td></tr></table></figure><p>接着即可完成兄弟组件数据通信。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//接收数据者</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    import $bus from &#x27;../../bus&#x27;;</span><br><span class="line">    //组合API函数</span><br><span class="line">    import &#123;onMounted&#125; from &#x27;vue&#x27;;</span><br><span class="line">    //组件挂载完毕，当前组件绑定事件，接收兄弟组件传来的数据</span><br><span class="line">    onMounted(() =&gt; &#123;</span><br><span class="line">        //第一个参数为事件类型，第二个参数为事件回调</span><br><span class="line">        $bus.on(&#x27;aa&#x27;, (e)=&gt;&#123;</span><br><span class="line">            console.log(e)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//发送数据者</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    import $bus from &#x27;../../bus&#x27;;</span><br><span class="line">    //事件回调</span><br><span class="line">    const handler = () =&gt; &#123;</span><br><span class="line">        $bus.emit(&#x27;aa&#x27;,&#123;dd: &quot;bb&quot;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="4-v-model"><a href="#4-v-model" class="headerlink" title="4. v-model"></a>4. v-model</h4><p>v-model：基础用法为收集表单数据，完成数据双向绑定。</p><p>但是也可以实现组件之间通信！</p><p>v-model在组件上使用：相当于给子组件传递props[modelValue]，绑定自定义事件update:modelValue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;Event v-model:a=&quot;a&quot; v-model:b=&quot;b&quot;&gt;&lt;/Event&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    import Evenet from &#x27;./Event.vue&#x27;;</span><br><span class="line">    import &#123;ref&#125; from &#x27;vue&#x27;;</span><br><span class="line">    //父数据</span><br><span class="line">    let a = ref(&quot;xxxx&quot;);</span><br><span class="line">    let b = ref(&quot;xxxxxx&quot;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//子组件Event</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;button @click=&quot;handler&quot;&gt;a&#123;&#123;a&#125;&#125;&lt;/button&gt;</span><br><span class="line">        &lt;button&gt;b&#123;&#123;b&#125;&#125;&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    let props = defineProps([&#x27;a&#x27;, &#x27;b&#x27;]);</span><br><span class="line">    let $emit = defineEmits([&#x27;update:a&#x27;, &#x27;update:b&#x27;])</span><br><span class="line">    const handler = () =&gt; &#123;</span><br><span class="line">        //第一个参数为事件类型xxx，后面为注入数据</span><br><span class="line">        $emit(&#x27;update:a&#x27;, props.a + 3);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="5-useAttrs"><a href="#5-useAttrs" class="headerlink" title="5. useAttrs"></a>5. useAttrs</h4><p>此方法可以获取组件标签身上的属性与事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;HindButton type=&quot;primary&quot; size=&quot;small&quot;&gt;&lt;/HindButton&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//子组件HindButton</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;el-button :=&quot;$attrs&quot;&gt;&lt;/el-button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    import &#123;useAttrs&#125; from &#x27;vue&#x27;;</span><br><span class="line">    let $attrs = useAttrs();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>注意：props与useAttrs方法都可以获取父组件的属性和属性值，但是props优先级更高。</p><h4 id="6-ref与-parent"><a href="#6-ref与-parent" class="headerlink" title="6. ref与$parent"></a>6. ref与$parent</h4><p>ref：可以获取真实的DOM节点，可以获取到子组件的实例VC。</p><p>$parent：可以获取到父组件的实例。</p><h4 id="7-provide与inject"><a href="#7-provide与inject" class="headerlink" title="7. provide与inject"></a>7. provide与inject</h4><p>实现隔辈组件通信。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//祖先组件</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    import Evenet from &#x27;./Event.vue&#x27;;</span><br><span class="line">    import &#123;ref, provide&#125; from &#x27;vue&#x27;;</span><br><span class="line">    let car = ref(&quot;xasda&quot;);</span><br><span class="line">    //第一个参数为key，第二个参数为数据</span><br><span class="line">    provide(&quot;TOKEN&quot;, car)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//后辈组件Evenet</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    import &#123;ref, inject&#125; from &#x27;vue&#x27;;</span><br><span class="line">    let car = inject(&quot;TOKEN&quot;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>注意：可以修改数据，不是只读，和props不一样！</p><h4 id="8-pinia"><a href="#8-pinia" class="headerlink" title="8. pinia"></a>8. pinia</h4><ul><li><p>vuex：集中式管理状态容器，可以实现任意组件间通信！</p><p>核心概念：state、mutations、actions、getters、modules。</p></li><li><p>pinia：集中式管理状态容器，可以实现任意组件间通信！</p><p>核心概念：state、actions、getters。</p></li></ul><ol><li><p>选择式写法</p><p>在store文件夹下新建文件index.ts，创建大仓库。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123;createPinia&#125; from &#x27;pinia&#x27;;</span><br><span class="line">let store = createPinia();</span><br><span class="line">export default createPinia</span><br></pre></td></tr></table></figure><p>在main.js引入仓库。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import store from &#x27;./store&#x27;;</span><br><span class="line">app.use(store);</span><br></pre></td></tr></table></figure><p>接着在store文件夹下创建modules文件夹，存放小仓库，新建info.ts。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import &#123;defineStore&#125; from &#x27;pinia&#x27;;</span><br><span class="line"></span><br><span class="line">//defineStore方法返回一个函数，让组件可以获取仓库数据</span><br><span class="line">//参数：小仓库名字+小仓库配置对象</span><br><span class="line">let useInfoStore = defineStore(&quot;info&quot;, &#123;</span><br><span class="line">    //存储数据：state</span><br><span class="line">    state: () =&gt; &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            a: &quot;asdasa&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line">        updateA(param)&#123;</span><br><span class="line">            //直接对this.a进行修改</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    //计算属性</span><br><span class="line">    getters: &#123;</span><br><span class="line">        total()&#123;</span><br><span class="line">            //返回计算结果res</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">export default useInfoStore；</span><br></pre></td></tr></table></figure><p>此时，组件即可选取仓库，获取对应数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;button @click=&quot;updateState&quot;&gt;修改数据&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    import &#123;useInfoStore&#125; from &#x27;../../store/modules/info.ts&#x27;;</span><br><span class="line">    let info = useInfoStore();</span><br><span class="line">    </span><br><span class="line">    const updateState = () =&gt; &#123;</span><br><span class="line">        //可以直接对info.a进行修改</span><br><span class="line">        //也可以调用仓库里面actions自定义的方法</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>组合式写法</p><p>在store&#x2F;modules文件夹下，新建todo.ts。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import &#123;defineStore&#125; from &#x27;pinia&#x27;;</span><br><span class="line">import &#123;ref&#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">//参数：小仓库名字+小仓库配置对象</span><br><span class="line">let useTodoStore = defineStore(&quot;todo&quot;, () =&gt; &#123;</span><br><span class="line">    let todos = ref([&#123;a: &quot;asdasda&quot;&#125;]);</span><br><span class="line">    </span><br><span class="line">    //返回一个对象：属性和方法。以给组件使用</span><br><span class="line">    return &#123;</span><br><span class="line">        todos,</span><br><span class="line">        update()&#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">export default useTodoStore；</span><br></pre></td></tr></table></figure><p>接着组件开始调用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;button @click=&quot;updateTodo&quot;&gt;修改数据&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    import &#123;useTodoStore&#125; from &#x27;../../store/modules/todo.ts&#x27;;</span><br><span class="line">    let todo = useTodoStore();</span><br><span class="line">    </span><br><span class="line">    const updateTodo = () =&gt; &#123;</span><br><span class="line">        todo.update();</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h4 id="9-插槽"><a href="#9-插槽" class="headerlink" title="9. 插槽"></a>9. 插槽</h4><ul><li><p><input disabled="" type="checkbox"> 默认插槽</p><p><slot></slot></p></li><li><p><input disabled="" type="checkbox"> 具名插槽</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//子组件Test</span><br><span class="line">&lt;slot name=&quot;a&quot;&gt;&lt;/slot&gt;</span><br><span class="line">&lt;slot name=&quot;b&quot;&gt;&lt;/slot&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">父组件</span><br><span class="line">&lt;Test&gt;</span><br><span class="line">    &lt;template v-slot:a&gt;</span><br><span class="line">        ...</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;template v-slot:b&gt;</span><br><span class="line">        ...</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/Test&gt;</span><br></pre></td></tr></table></figure></li><li><p><input disabled="" type="checkbox"> 作用域插槽（很常用）</p><p>可以传递数据的插槽，子组件可将数据回传给父组件，父组件决定如何将数据在子组件内展示。</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>视频</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
